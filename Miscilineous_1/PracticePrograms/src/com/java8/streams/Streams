Streams -  sequence of elements that supporting sequential and parallel aggregate operations.
A stream does not store data and, in that sense, is not a data structure. It also never modifies the underlying data source.
Introduced in Java 8, the Stream API is used to process collections of objects. A stream is a sequence of objects that supports various methods which can be pipelined to produce the desired result.
The features of Java stream are –

A stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.
Streams don’t change the original data structure, they only provide the result as per the pipelined methods.
Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined. 
Terminal operations mark the end of the stream and return the result.

Stream Operations ->
1)Intermediate Operations
2)Terminal Operations
		//intermediate operations
		1)filter(Predicate p)
        2)map(Function f)
        3)IntStream (mapToInt(ToIntFunction f)
        LongStream mapToLong(ToLongFunction	f)
        DoubleStream mapToDouble(ToDoubleFunction f)
        Stream<R> flatMap(Function f)
        IntStream flatMapToInt(Function f)
        LongStream flatMapToLong(Function f)
        DoubleStream flatMapToDouble(Function f)
        Stream<T> distinct()
        Stream<T> sorted()
        Stream<T> sorted(Comparator c)
        Stream<T> peek(Consumer c)
        Stream<T> limit(long maxSize);
        Stream<T> skip(long n);
        
        map() ->  returns a stream consisting of the results of applying the given function to the elements of this stream
        
        
        void forEach(Consumer c);
        void forEachOrdered(Consumer c);
        Object[] toArray()
        A[] toArray(IntFunction<A[]> arr);
        T reduce(T identity, BinaryOperator<T> accumulator);
        Optional<T> reduce(BinaryOperator<T> accumulator);
        U reduce(U identity,
                BiFunction<U, ? super T, U> accumulator,
                BinaryOperator<U> combiner);
        R collect(Supplier<R> supplier,
                BiConsumer<R, ? super T> accumulator,
                BiConsumer<R, R> combiner);
        R collect(Collector<? super T, A, R> collector);
        Optional<T> min(Comparator c);
        Optional<T> max(Comparator c);
        long count();
        boolean anyMatch(Predicate p);
        boolean allMatch(Predicate p);
        boolean noneMatch(Predicate p);
        Optional<T> findFirst();
        Optional<T> findAny();